
#include <Arduino.h>
#include <U8g2lib.h> //graphics library
#include <TinyGPS++.h> //GPS library
#include <ArduinoP13.h> //Plan13 orbital calculations library
#include <Time.h>
#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel pixels(1, PIN_NEOPIXEL);
/*
 * Copy and paste the latest TLE for ISS from here - https://celestrak.com/NORAD/elements/gp.php?CATNR=25544&FORMAT=tle
 * 
ISS (ZARYA)             
1 25544U 98067A   21080.03331738  .00000347  00000-0  14509-4 0  9996
2 25544  51.6455  58.7339 0003472 133.7858 305.7331 15.48917935274933
*
 */

const char *tleName = "ISS (ZARYA)"; //copy TLE title from above
const char *tlel1   = "1 25544U 98067A   21080.03331738  .00000347  00000-0  14509-4 0  9996";  //Copy line 1 of the latest TLE data here from above
const char *tlel2   = "2 25544  51.6455  58.7339 0003472 133.7858 305.7331 15.48917935274933";  //Copy line 2 of the latest TLE data here from above



const char  *pcMyName = "OHI";    // Observer name - You can use your radio call sign here or leave blank


double       dfreqRX  = 137.100;     // Nominal downlink frequency
double       dfreqTX  = 437.800;     // Nominal uplink frequency


double       dSatLAT  = 0;           // Satellite latitude
double       dSatLON  = 0;           // Satellite longitude
double       dSatAZ   = 0;           // Satellite azimuth
double       dSatEL   = 0;           // Satellite elevation

double       dSatLATb  = 0;           // Satellite latitude
double       dSatLONb  = 0;           // Satellite longitude
double       dSatAZb   = 0;           // Satellite azimuth
double       dSatELb   = 0;           // Satellite elevation

double       dSunLAT  = 0;           // Sun latitude
double       dSunLON  = 0;           // Sun longitude
double       dSunAZ   = 0;           // Sun azimuth
double       dSunEL   = 0;           // Sun elevation

char         acBuffer[20];            // Buffer for ASCII time

static const uint32_t GPSBaud = 9600;  //GPS Baud rate.  Standard is 9600.

TinyGPSPlus gps;

/*
 
  Set your screen info below depending on your screen type https://github.com/olikraus/u8g2/wiki/u8g2setupcpp

*/
   
U8G2_SSD1327_WS_128X128_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

//U8G2_SSD1327_WS_128X128_F_SW_I2C u8g2(U8G2_R0,SCL,SDA, /* reset=*/ U8X8_PIN_NONE);

#define U8LOG_WIDTH 32
#define U8LOG_HEIGHT 4
uint8_t u8log_buffer[U8LOG_WIDTH*U8LOG_HEIGHT*2];
U8G2LOG u8g2log;

int xlon;
int ylat;

int xlonb;
int ylatb;

int gpschar;

// XBM file for World Map Image. Map must be equirectalinear projection.

#define world_width 128
#define world_height 62
static unsigned char world_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0xF0, 0x81, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x07, 
  0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 
  0xFF, 0xFF, 0xFF, 0x01, 0xE0, 0x01, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xF0, 0xFB, 0x0F, 0xF9, 0xFF, 0x01, 0x00, 0x00, 0x78, 0x80, 
  0xFF, 0x01, 0x07, 0x00, 0x00, 0x00, 0xF8, 0xF7, 0x3F, 0xF0, 0xFF, 0x00, 
  0x00, 0x00, 0x0C, 0xFB, 0xFF, 0x3F, 0x1E, 0x00, 0xC0, 0x7F, 0xDF, 0xEF, 
  0xFF, 0xE0, 0xFF, 0x00, 0xC0, 0x0F, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xE7, 0xFF, 0xFF, 0xFF, 0xE7, 0xF3, 0x0F, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xE6, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0x03, 0x06, 
  0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0x7F, 
  0xF0, 0x81, 0x01, 0x00, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
  0xC0, 0x83, 0xFF, 0x7F, 0xF0, 0x03, 0x00, 0x40, 0x7C, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x03, 0x80, 0x00, 0xFF, 0xFF, 0xE7, 0x07, 0x00, 0x40, 
  0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x03, 0x00, 0x00, 0xFE, 0xFF, 
  0xF7, 0x1F, 0x00, 0xE0, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x01, 
  0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x1F, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x17, 0x00, 0xC0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0x02, 0x00, 0xA0, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0x00, 
  0x00, 0x00, 0xF0, 0xFF, 0x7F, 0x00, 0x00, 0xE0, 0xF9, 0xF7, 0xFD, 0xFF, 
  0xFF, 0x7F, 0x04, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x00, 0xE0, 
  0x6D, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x02, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0x1F, 0x00, 0x00, 0xE0, 0x0F, 0xF8, 0xFF, 0xFF, 0xFF, 0xE7, 0x03, 0x00, 
  0x00, 0x00, 0xC0, 0xFF, 0x0F, 0x00, 0x00, 0xF0, 0x9F, 0xEA, 0xFF, 0xFF, 
  0xFF, 0x67, 0x01, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x0D, 0x00, 0x00, 0xF0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 
  0x0C, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3D, 0x08, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x3F, 0xFF, 
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x11, 0x00, 0x00, 0xFC, 
  0xFF, 0xFF, 0x3F, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x61, 0x00, 0x00, 0xFC, 0xFF, 0xDF, 0x0F, 0x3E, 0x3E, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x03, 0x1C, 
  0x7C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0xFC, 
  0xFF, 0xFF, 0x01, 0x1C, 0x78, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xE6, 0x03, 0x00, 0xFC, 0xFF, 0xFF, 0x07, 0x08, 0x68, 0x18, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0xF8, 0xFF, 0xFF, 0x03, 0x10, 
  0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0xE0, 
  0xFC, 0xFF, 0x01, 0x00, 0x1C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xF0, 0x7F, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0xF8, 0x7F, 0x00, 0x00, 
  0x98, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x03, 0x00, 
  0xF0, 0x7F, 0x00, 0x00, 0xB0, 0xCF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xF8, 0xFF, 0x0F, 0x00, 0xF0, 0x7F, 0x00, 0x00, 0xE0, 0x00, 0x0E, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x07, 0x00, 0xE0, 0x3F, 0x00, 0x00, 
  0x00, 0x14, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x07, 0x00, 
  0xE0, 0x3F, 0x00, 0x00, 0x00, 0xC0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xE0, 0xFF, 0x07, 0x00, 0xF0, 0x7F, 0x03, 0x00, 0x00, 0xE0, 0x0C, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x03, 0x00, 0xF0, 0xBF, 0x03, 0x00, 
  0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 
  0xF0, 0x1F, 0x01, 0x00, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0xFF, 0x01, 0x00, 0xE0, 0x9F, 0x01, 0x00, 0x00, 0xFF, 0x3F, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 
  0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0x00, 0x00, 
  0xE0, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xC0, 0x7F, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0x00, 0xFE, 0x3F, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 
  0x00, 0x0E, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0F, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0xFF, 0xD1, 0x03, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xF9, 
  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x20, 0xC0, 0x07, 0x00, 0xF0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0xF9, 
  0xFF, 0x07, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x03, 0x40, 0xFE, 0xFF, 0xFF, 0xBF, 0xC4, 0xF8, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, };



void setup(void) {

  Serial1.begin(GPSBaud);
  //Serial.begin(9600); //uncomment to debug the GPS
  u8g2.begin();  
  u8g2log.begin(U8LOG_WIDTH, U8LOG_HEIGHT, u8log_buffer);
  u8g2log.setLineHeightOffset(1); // set extra space between lines in pixels, this can be negative
  u8g2log.setRedrawMode(1);   // 0: Update screen with newline, 1: Update screen for every char 

  pixels.begin();  // initialize the neopixel
}

void loop(void) {
  
  while (Serial1.available()>0)
      {  gpschar = Serial1.read(); //read raw gps data to gpschar
      // Serial.write(gpschar);  // uncomment to send raw gps over Serial to debug
      //  u8g2log.write(gpschar);   // write raw gps data to u8g2log buffer
        gps.encode(gpschar);      // extract useful info from raw gps data
      }
  
     double lat_val, lng_val, alt_m_val;
     uint8_t hr_val, min_val, sec_val, hr_val_jp, sats_val;
     bool loc_valid, alt_valid, time_valid, sats_valid;
     lat_val = gps.location.lat();  /* Get latitude data */
     loc_valid = gps.location.isValid(); /* Check if valid location data is available */
     lng_val = gps.location.lng(); /* Get longtitude data */
     alt_m_val = gps.altitude.meters();  /* Get altitude data in meters */
     alt_valid = gps.altitude.isValid(); /* Check if valid altitude data is available */
     hr_val = gps.time.hour(); /* Get hour */
     
     min_val = gps.time.minute();  /* Get minutes */
     sec_val = gps.time.second();  /* Get seconds */
     time_valid = gps.time.isValid();  /* Check if valid time data is available */
      double year_val = (gps.date.year());
      double month_val = (gps.date.month());
      double day_val = (gps.date.day());
     sats_valid = gps.satellites.isValid(); /* Check if valid GPS Satellite lock */
     sats_val = gps.satellites.value();

    if (hr_val < 15) { hr_val_jp = hr_val + 9;  // convert UTC to Japan time zone - change these figures for your time zone
      }
    else {hr_val_jp = hr_val -15;
      }
      //Set location for P13 calculations from current GPS data
      double dMyLAT = gps.location.lat();
      double dMyLON = gps.location.lng();
      double dMyALT = gps.altitude.meters();
        
        //P13Sun Sun;                                                       // Create object for the sun
        P13DateTime MyTime(year_val, month_val, day_val, hr_val, min_val, sec_val); // Set start time for the prediction
        P13Observer MyQTH(pcMyName, dMyLAT, dMyLON, dMyALT);              // Set observer coordinates

        P13Satellite MySAT(tleName, tlel1, tlel2);                        // Create ISS data from TLE

        MyTime.ascii(acBuffer);             // Get time for prediction as ASCII string
        MySAT.predict(MyTime);              // Predict ISS for specific time
        MySAT.latlon(dSatLAT, dSatLON);     // Get the rectangular coordinates
        MySAT.elaz(MyQTH, dSatEL, dSatAZ);  // Get azimut and elevation for MyQTH
  
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_u8glib_4_tr);
    
    u8g2.drawXBMP(0,0, world_width, world_height, world_bits); //draw World Map
    u8g2.drawFrame(0,0,128,63);   //setup fixed screen info and borders

    u8g2.drawFrame(0, 64, 128,64);  
    u8g2.drawLine(0, 73, 128,73);
    u8g2.drawLine(0, 91, 128,91);
    u8g2.drawStr(2, 71, "MINI MISSION CONTROL ");
    
    u8g2.drawLine(0, 118, 128,118);
    u8g2.drawStr(2, 125, "OKUBO HEAVY INDUSTRIES");

    if (!loc_valid)
      {          
      
        u8g2.drawStr(3, 80, "LAT : ********");
        
        u8g2.drawStr(60, 80, "LON : ********");
        
       }
       else
       {
          u8g2.drawStr(3, 80, "LAT :");
          u8g2.setCursor(22, 80);
          u8g2.println(lat_val, 6);
          
          
          u8g2.drawStr(60, 80, "LON :");
          u8g2.setCursor(79, 80);
          u8g2.println(lng_val, 6);
          
        }
        if (!alt_valid)
        {
          
          u8g2.drawStr(3, 88, "ALT : ********");
        }
        else
        {
           
          u8g2.drawStr(3, 88, "ALT :");
          u8g2.setCursor(22, 88);
          u8g2.println(alt_m_val, 2);   
        }
        
        if (!sats_valid)
        {
          
          u8g2.drawStr(60, 88, "GPS LOCK : **");
        }
        else
        {
         
          u8g2.drawStr(60, 88, "GPS LOCK :");
          u8g2.setCursor(100, 88);
          u8g2.println(sats_val, 1);   
        }
        
        if (!time_valid)
        {
          u8g2.drawStr(84, 71, "JST:********"); //change JST to your time zone 
         
        }
        else
        {
          
          
            
          char time_string[32];
          sprintf(time_string, "JST:%02d:%02d:%02d \n", hr_val_jp, min_val, sec_val); //change JST to your time zone
          u8g2.setCursor(84, 71);
          u8g2.print(time_string);    
        }
  
        u8g2log.print("ISS   UTC:"); //Print info for ISS time, date and location etc. to log
        u8g2log.print(acBuffer); //UTC time from GPS
        
        u8g2log.print("\n");
        u8g2log.print("Lat: ");
        u8g2log.print(dSatLAT,4);
        u8g2log.print("  Lon: ");
        u8g2log.print(dSatLON,4);

        
 
          u8g2log.print("\n");
          u8g2log.print("Az: ");
          u8g2log.print(dSatAZ,2);
          u8g2log.print("   El: ");
          u8g2log.println(dSatEL,2); 
          
         
          u8g2log.print("RX: ");
          u8g2log.print(MySAT.doppler(dfreqRX, P13_FRX),6);
          u8g2log.print(", TX: ");
          u8g2log.println(MySAT.doppler(dfreqTX, P13_FTX),6);

          u8g2.drawLog(3, 98, u8g2log);     // draw the log content on the display
          
          //Light the neopixel if ISS is above the horizon
          if (dSatEL > 0) {
            pixels.setPixelColor(0, pixels.Color((dSatEL * 2.8), (dSatEL * 2.8), (dSatAZ * 0.7)));
            pixels.show();
          }
          else {
           pixels.clear();
           pixels.show(); 
          }

    //Calculate map location current location of ISS
    float klon = dSatLON;
    float klat = dSatLAT;
    if (klon > 0) {
       xlon = (((klon /180)*64) +64);
    }
    else if (klon < 0) {
      klon=-klon;
       xlon = (64-((klon /180)*64)); 
    } 
    if (klat > 0){
       ylat = (32-((klat/90)*32));
    }
    else if (klat < 0){
      klat=-klat;
       ylat = (((klat/90)*32)+32);  
    }
    


    // Calculate orbital path of ISS for t - 50 minutes to t+ 50 minutes
        for (int delta = -50; delta < 50; delta = delta + 1) {
        P13DateTime MyTime2(year_val, month_val, day_val, hr_val, (min_val + delta) , sec_val); // Set start time for the prediction
        P13Observer MyQTH(pcMyName, dMyLAT, dMyLON, dMyALT);              // Set observer coordinates
        P13Satellite MySAT2(tleName, tlel1, tlel2);                        // Create ISS data from TLE
        MySAT2.predict(MyTime2);              // Predict ISS for specific time
        MySAT2.latlon(dSatLATb, dSatLONb);     // Get the rectangular coordinates

        float klonb = dSatLONb; //Calculate Map position for orbital path
        float klatb = dSatLATb;
        if (klonb > 0) {
         xlonb = (((klonb /180)*64) +64);
         }
        else if (klonb < 0) {
          klonb=-klonb;
          xlonb = (64-((klonb /180)*64)); 
         } 
        if (klatb > 0){
          ylatb = (32-((klatb/90)*32));
          }
        else if (klatb < 0){
          klatb=-klatb;
          ylatb = (((klatb/90)*32)+32);  
        }
    u8g2.setDrawColor(2);  //draw orbital path
    u8g2.drawPixel(xlonb, ylatb);
    
        } 
    
    u8g2.setDrawColor(0); //Draw current location of ISS
    u8g2.drawCircle(xlon, ylat, 3);
    u8g2.setDrawColor(1);
    u8g2.drawCircle(xlon, ylat, 2);
    u8g2.setDrawColor(0);
    u8g2.drawCircle(xlon, ylat, 1);
    u8g2.setDrawColor(0);
    u8g2.drawPixel(xlon, ylat);
    u8g2.setFont(u8g2_font_u8glib_4_tr);    // u8g2 font
    
    u8g2.setDrawColor(0);
    u8g2.drawBox(xlon-6, ylat+4,13,6); //Draw black box for text
    u8g2.setCursor(xlon-5, ylat+9);
    u8g2.setDrawColor(1);
    u8g2.print("ISS");
    
  } while ( u8g2.nextPage() );
  
}
